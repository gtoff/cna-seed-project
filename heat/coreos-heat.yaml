heat_template_version: 2013-05-23

description: Template to deploy a CoreOS Cluster of 5 Machines

parameters:
  Flavor: 
    default: m1.medium
    description: "Type of instance (flavor) to be used"
    label: "Instance Type"
    type: string
    constraints:
      - allowed_values: [m1.small, m1.medium, m1.large ]
        description: Allowed values are m1.small, m1.medium and m1.large
  Image:
    description: "Name of image to use"
    default: "CoreOS_723.3.0"
    type: string
    constraints:
      - allowed_values: ["CoreOS_723.3.0"]
        description: Allowed values are "CoreOS_723.3.0"
  Public Net ID:
    type: string
    description: ID of public network for which floating IP addresses will be allocated (default net04_ext) 
    default: 8f65289d-3c0d-4670-bf10-26b8feb24025
  Private Net ID:
    type: string
    description: ID of private network into which servers get deployed (default internal)
    default: c666051f-5d3b-4705-b8a2-00a9f3e7a0b8
  Private Subnet ID:
    type: string
    description: ID of private sub network into which servers get deployed (default internal_subnet)
    default: 952f2fc7-eeea-4cfe-926a-5cc68609cb4f
  Key Name CoreOS: 
    description: "Name of key-pair to be used for the CoreOS VMs"
    label: "Key Name"
    type: string
    default: cna_key
  CoreOS Cluster Discovery URL:
    description: "URL of the Cluster-Discovery URL"
    type: string
    default: https://discovery.etcd.io/new
  Preload Docker Images:
    description: "Whether or not to download all docker images on all hosts before units are started"
    type: string
    default: "True"
    constraints:
      - allowed_values: ["True", "False"]
  Docker Image Tag:
    description: "Docker Image Tag to use when downloading containers from Docker hub"
    type: string
    default: "master"
    constraints:
      - allowed_values: ["master", "latest"]
  DynamiteConfigURL:
    description: "A URL from which to dowload the Dynamite config file."
    type: string
    default: "https://raw.githubusercontent.com/icclab/cna-seed-project/master/init/dynamite.yaml"
  DynamiteFleetFilesURL: 
    description: "A URL from which to dowload the Dynamite Fleet files."
    default: "https://raw.githubusercontent.com/icclab/cna-seed-project/master/init/fleet-files"
    type: string
      
resources:
  coreos_init:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
            write_files:
            - path: /etc/environment
              content:
                str_replace:
                  template: |
                    COREOS_PUBLIC_IPV4=$public_ipv4
                    COREOS_PRIVATE_IPV4=$private_ipv4
                    DOCKER_PRELOAD_ENABLED=$preload-docker-images$
                    DOCKER_IMAGE_TAG=$docker_image_tag$
                    DYNAMITE_CONFIG_URL=$DynamiteConfigURL$
                    DYNAMITE_FLEET_FILES_URL=$DynamiteFleetFilesURL$
                  params:
                    $docker_image_tag$: {get_param: "Docker Image Tag"}
                    $DynamiteConfigURL$: {get_param: "DynamiteConfigURL"}
                    $DynamiteFleetFilesURL$: {get_param: "DynamiteFleetFilesURL"}
            - path: /etc/ssh/sshd_config
              permissions: '0600'
              owner: root:root
              content: |
                # Use most defaults for sshd configuration.
                UsePrivilegeSeparation sandbox
                Subsystem sftp internal-sftp

                PermitRootLogin no
                AllowUsers core
                PasswordAuthentication no
                ChallengeResponseAuthentication no
            coreos:
              etcd2:
                discovery: { get_param: "CoreOS Cluster Discovery URL" }
                advertise-client-urls: http://$private_ipv4:2379
                initial-advertise-peer-urls: http://$private_ipv4:2380
                listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
                listen-peer-urls: http://$private_ipv4:2380
              fleet:
                metadata: public=true
              update:
                reboot-strategy: 'off'
              units:
                - name: etcd2.service
                  command: start
                - name: fleet.service
                  command: start
                - name: fleet.socket
                  command: start
                  drop-ins:
                  - name: 30-ListenStream.conf
                    content: |
                      [Socket]
                      ListenStream=49153
                - name: docker-tcp.socket
                  command: start
                  enable: true
                  content: |
                    [Unit]
                    Description=Docker Socket for the API
                    [Socket]
                    ListenStream=2375
                    BindIPv6Only=both
                    Service=docker.service
                    [Install]
                    WantedBy=sockets.target
                - name: zurmo-init.service
                  command: start
                  content: |
                    [Unit]
                    Description=Service to initialize Zurmo
                    Requires=fleet.service
                    After=fleet.service
                    [Service]
                    RemainAfterExit=true
                    EnvironmentFile=/etc/environment
                    Restart=on-failure
                    ExecStartPre=/usr/bin/docker pull icclabcna/zurmo_dynamite:${DOCKER_IMAGE_TAG}
                    ExecStartPre=/bin/bash -c 'wget https://raw.githubusercontent.com/icclab/cna-seed-project/master/zurmo_dynamite/fleet/zurmo_dynamite.service -O /tmp/zurmo_dynamite.service'
                    ExecStart=/bin/bash -c 'STATUS_CODE=$(curl -L -o /dev/null -w "%{http_code}" http://127.0.0.1:4001/v2/keys/ --silent); \
                    RUNNING_NODES=0; \
                    while [[ $STATUS_CODE > 399 ]]; \
                    do \
                       echo "ETCD not available yet. Waiting..."; \
                       STATUS_CODE=$(curl -L -o /dev/null -w "%{http_code}" http://127.0.0.1:4001/v2/keys/ --silent); \
                       sleep 1; \
                    done; \
                    while [[ $RUNNING_NODES < 3 ]]; \
                    do \
                       echo "Wait for at least 3 nodes in etcd cluster become healthy"; \
                       RUNNING_NODES=$(etcdctl cluster-health | sed 1d | grep -c " healthy"); \
                    done; \
                    fleetctl list-units > /dev/null; \
                    while [[ $? != 0 ]]; \
                    do \
                    echo \"Fleet not available yet. Waiting...\"; \
                    fleetctl list-units > /dev/null; \
                    done; \
                    echo "Fleet is available."; \
                    STATUS_CODE=$(curl -L http://127.0.0.1:4001/v2/keys/init?prevExist=false -XPUT -d "%H - %m - %b" -o /dev/null -w "%{http_code}" --silent); \
                    if [[ $STATUS_CODE < 400 ]]; then \
                       echo "Initializing Cluster"; \
                       fleetctl load /tmp/zurmo_dynamite.service; \
                       fleetctl start zurmo_dynamite.service; \
                    else \
                       echo "Cluster initialized already. Do nothing"; \
                     fi \
                     '
                    [Install]
                    WantedBy=multi-user.target

  vm_coreos_01:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: "$stack_name$-CoreOS-01"
          params:
            $stack_name$: { get_param: "OS::stack_name" }
      image: { get_param: Image }
      flavor: { get_param: Flavor }
      key_name: { get_param: "Key Name CoreOS" }
      networks:
        - port: { get_resource: vm_coreos_01_port }
      user_data_format: RAW
      user_data:
        get_resource: coreos_init

  vm_coreos_01_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: "Private Net ID" }
      fixed_ips:
        - subnet_id: { get_param: "Private Subnet ID" }
      security_groups:
        - coreos

  vm_coreos_01_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: "Public Net ID" }
      port_id: { get_resource: vm_coreos_01_port }

  vm_coreos_02:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: "$stack_name$-CoreOS-02"
          params:
            $stack_name$: { get_param: "OS::stack_name" }
      image: { get_param: Image}
      flavor: { get_param: Flavor }
      key_name: { get_param: "Key Name CoreOS" }
      networks:
        - port: { get_resource: vm_coreos_02_port }
      user_data_format: RAW
      user_data:
        get_resource: coreos_init

  vm_coreos_02_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: "Private Net ID" }
      fixed_ips:
        - subnet_id: { get_param: "Private Subnet ID" }
      security_groups:
        - coreos

  vm_coreos_03:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: "$stack_name$-CoreOS-03"
          params:
            $stack_name$: { get_param: "OS::stack_name" }
      image: { get_param: Image}
      flavor: { get_param: Flavor }
      key_name: { get_param: "Key Name CoreOS" }
      networks:
        - port: { get_resource: vm_coreos_03_port }
      user_data_format: RAW
      user_data:
        get_resource: coreos_init

  vm_coreos_03_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: "Private Net ID" }
      fixed_ips:
        - subnet_id: { get_param: "Private Subnet ID" }
      security_groups:
        - coreos

  vm_coreos_04:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: "$stack_name$-CoreOS-04"
          params:
            $stack_name$: { get_param: "OS::stack_name" }
      image: { get_param: Image}
      flavor: { get_param: Flavor }
      key_name: { get_param: "Key Name CoreOS" }
      networks:
        - port: { get_resource: vm_coreos_04_port }
      user_data_format: RAW
      user_data:
        get_resource: coreos_init

  vm_coreos_04_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: "Private Net ID" }
      fixed_ips:
        - subnet_id: { get_param: "Private Subnet ID" }
      security_groups:
        - coreos

  vm_coreos_05:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: "$stack_name$-CoreOS-05"
          params:
            $stack_name$: { get_param: "OS::stack_name" }
      image: { get_param: Image}
      flavor: { get_param: Flavor }
      key_name: { get_param: "Key Name CoreOS" }
      networks:
        - port: { get_resource: vm_coreos_05_port }
      user_data_format: RAW
      user_data:
        get_resource: coreos_init

  vm_coreos_05_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: "Private Net ID" }
      fixed_ips:
        - subnet_id: { get_param: "Private Subnet ID" }
      security_groups:
        - coreos

outputs:
  CoreOS-01 Private IP:
    description: Private IP address of the CoreOS-01 VM
    value: { get_attr: [ vm_coreos_01, first_address ] }
  CoreOS-01 Public IP:
    description: Public IP address of the CoreOS-01 VM
    value: { get_attr: [ vm_coreos_01_floating_ip, floating_ip_address ] }
  CoreOS-02 Private IP:
    description: Private IP address of the CoreOS-02 VM
    value: { get_attr: [ vm_coreos_02, first_address ] }
  CoreOS-03 Private IP:
    description: Private IP address of the CoreOS-03 VM
    value: { get_attr: [ vm_coreos_03, first_address ] }
  CoreOS-04 Private IP:
    description: Private IP address of the CoreOS-04 VM
    value: { get_attr: [ vm_coreos_04, first_address ] }
  CoreOS-05 Private IP:
    description: Private IP address of the CoreOS-05 VM
    value: { get_attr: [ vm_coreos_05, first_address ] }
  CoreOS Cluster ETCD Endpoint:
    description: ETCD Endpoint of CoreOS Cluster
    value: { get_param: "CoreOS Cluster Discovery URL" }
